#  ---------------------------------------------------------------------------
#
#  Description:  This file holds all my BASH configurations and aliases
#
#  Sections:
#  1.  Environment Configuration
#  2.  Make Terminal Better (remapping defaults and adding functionality)
#  3.  File and Folder Management
#  4.  Searching
#  5.  Process Management
#  6.  Networking
#  7.  System Operations & Information
#  8.  Web Development
#  9.  Reminders & Notes
#  
#  Ref: https://natelandau.com/my-mac-osx-bash_profile/
#  --------------------------------------------------------------------------

#   -------------------------------
#   1. ENVIRONMENT CONFIGURATION
#   -------------------------------

# PS1 {{{
hash tput &>/dev/null
if [[ 0 -eq $? ]]; then
  # user host
  PS_1="$(tput bold)$(tput smul)$(tput setab 0)$(tput setaf 2)\\u$(tput setaf 7)@$(tput setaf 5)\\h"
  # time pwd
  PS_2="$(tput setaf 7)@$(tput setaf 6)\\t$(tput setaf 7):$(tput setaf 3)\\w$(tput sgr0) "
  # working dir info
  # PS_w="$(tput setab 252)$(tput setaf 16)"'$(ps1hlpr1)\n($(ps1hlpr2 $$))'"$(tput sgr0)"
  # the prompt $
  # PS_p="\033[1;35m$(__git_ps1 '(%s)')\n\\$ "
  PS1="${PS_1}${PS_2}\n" # ${PS_w}${PS_p}"
else
  PS1="\\u@\\h@\\t:\\w\n\\$ "
fi
# }}} PS1

#   -----------------------------
#   2. MAKE TERMINAL BETTER
#   -----------------------------
alias ls='ls --color=auto'
alias ll='ls -alhF --time-style=long-iso'
alias la='ls -A'
alias lt='ls -ltrhF --time-style=long-iso'
alias l='ls -CF'
alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias less='less -FSRXc'                    # Preferred 'less' implementation

alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias c='clear'                             # c:            Clear terminal display
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop


#   rme1: remove all files except one
    rme1() {
	find . -type f -not -name $1 -delete
    }

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.
#           Example: mans mplayer codec
#   --------------------------------------------------------------------
    mans () {
        man $1 | grep -iC2 --color=always $2 | less
    }

#   -------------------------------
#   3. FILE AND FOLDER MANAGEMENT
#   -------------------------------

zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
    extract () {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }

#   ---------------------------
#   4. SEARCHING
#   ---------------------------

alias qfind="find . -name "                 # qfind:    Quickly search for file
f() {                                       # f:        Find file under the current directory
  if [[ $# -eq 0 ]]; then
        echo "  Usage: f filename ... Find file under the current directory"
        return
  fi

  find . -name "$1" -print; 
}           
ff () {                                     # ff:       Find files whose filename contains some string
  if [[ $# -eq 0 ]]; then
        echo "  Usage: ff filename ... Find files whose filename contains some string"
        return
  fi
  /usr/bin/find . -name '*'"$@"'*' ; 
}      
ffs () {                                    # ffs:      Find file whose name starts with a given string
  if [[ $# -eq 0 ]]; then
        echo "  Usage: ff filename ... Find file whose name starts with a given string"
        return
  fi
  /usr/bin/find . -name "$@"'*' ; 
}  
ffe () {                                    # ffe:      Find file whose name ends with a given string
  if [[ $# -eq 0 ]]; then
        echo "  Usage: ff filename ... Find file whose name ends with a given string"
        return
  fi
  /usr/bin/find . -name '*'"$@" ; 
}  

ducks () { du -cksh * | sort -rn | head ; } # list largest folder


s() { # search file contain specific content
    if [[ $# -eq 0 ]]; then
        echo "  Usage: s <pattern> [path] ..."
    fi

    # search content recursively from path $2
    if [ "$#" -eq 2 ]; then
        grep -rnIi "$1" "$2"
    fi
    # search content recursively from current folder
    if [ "$#" -eq 1 ]; then
        grep -rnIi "$1" ./
    fi
}

sw() { # search files that match the whole word
    if [[ $# -eq 0 ]]; then
        echo "  Usage: sw pattern [path] ..."
    fi

    # search content recursively from path $2
    if [ "$#" -eq 2 ]; then
        grep -rnIiw "$1" "$2"
    fi
    # search content recursively from current folder
    if [ "$#" -eq 1 ]; then
        grep -rnIiw "$1" ./
    fi
}

si() { # search files with given suffix that match the pattern
    if [[ $# -eq 0 ]]; then
         echo "  Note : search files with given suffix that match the word"
        echo "  Usage: si pattern filetype-suffix ..."
    fi

    # search content recursively from current path
    if [ "$#" -eq 2 ]; then
        grep --include="$2"  -rnIi ./ -e "$1"
    fi

}

swi() { # search files with given suffix that match the whole word
    if [[ $# -eq 0 ]]; then
        echo "  Note : search files with given suffix that match the whole word"
        echo "  Usage: swi pattern filetype-suffix ..."
    fi

    # search content recursively from current path
    if [ "$#" -eq 2 ]; then
        grep --include="*$2*"  -rnIiw ./ -e "$1"
    fi

}


sif() { # search content in given files $2 
    if [[ $# -eq 0 ]]; then
        echo "  Usage: sif pattern [filetype] ..."
    fi

    # search content recursively from current path
    if [ "$#" -eq 2 ]; then
        grep --include="$2"  -rnIil ./ -e "$1"
    fi

}

sf() { # search file contain specific content, only display the file name
    if [[ $# -eq 0 ]]; then
        echo "  search file contain specific content, only display the file name "
        echo "  Usage: sf pattern [file path] ..."
    fi

    # search content recursively from path $2
    if [ "$#" -eq 2 ]; then
        grep -rnIil "$1" "$2"
    fi
    # search content recursively from current folder
    if [ "$#" -eq 1 ]; then
        grep -rnIil "$1" ./
    fi
}

sfw() { # search files whose content contains the given  word, only display the file name
    # search content recursively from path $2
    if [ "$#" -eq 2 ]; then
        grep -rnIilw "$1" "$2"
    fi
    # search content recursively from current folder
    if [ "$#" -eq 1 ]; then
        grep -rnIilw "$1" ./
    fi
}


#   ---------------------------
#   5. PROCESS MANAGEMENT
#   ---------------------------

#   killSsh: kill all old ssh connections
#   -----------------------------------------------------
    killSsh () { kill $(who -la | grep old | grep -o '\bold *[0-9]*' | grep -o '[0-9]*'); }
    alias killssh=killSsh
 
#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }
    alias findpid=findPid
    
#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
    alias memHogsTop='top -l 1 -o rsize | head -20'
    alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
    alias memhogs=memHogsTop

#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
    alias cpuHogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'
    alias cpuhogs=cpuHogs

#   topForever:  Continual 'top' listing (every 10 seconds)
#   -----------------------------------------------------
    alias topForever='top -l 9999999 -s 10 -o cpu'

#   ttop:  Recommended 'top' invocation to minimize resources
#   ------------------------------------------------------------
#       Taken from this macosxhints article
#       http://www.macosxhints.com/article.php?story=20060816123853639
#   ------------------------------------------------------------
    alias ttop="top -R -F -s 10 -o rsize"

#   myPs: List processes owned by my user:
#   ------------------------------------------------------------
    myPs() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
    alias myps=myPs
#   ---------------------------
#   6. NETWORKING
#   ---------------------------

alias myip='curl ipinfo.io/ip'                    # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        echo -e "\n${RED}Gateway :$NC " ; ip route | grep default
        echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }

#   ---------------------------------------
#   7. SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------

alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user

#   cleanupDS:  Recursively delete .DS_Store files
#   -------------------------------------------------------------------
    alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   -------------------------------------------------------------------
    alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
    alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
#   -----------------------------------------------------------------------------------
    alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

#    screensaverDesktop: Run a screensaver on the Desktop
#   -----------------------------------------------------------------------------------
    alias screensaverDesktop='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background'


#   ---------------------------------------
#   8. Debug
#   ---------------------------------------

    ulimit -c unlimited

#   ---------------------------------------
#   9. Export user's local software path
#   ---------------------------------------

# exports {{{
if [[ -z $BASHRC_LOADED ]]; then

prog=${HOME}/program
if [[ -d "${prog}" ]]; then
  if [[ -f "${prog}/.wl" ]]; then
    wl=$(cat "${prog}/.wl")
  else
    wl=$(ls ${prog})
  fi # white-list

  for home in ${wl}; do
    ph=${prog}/${home}
    if [[ -d "${ph}" ]]; then
      for bd in bin sbin; do
        if [[ -d "${ph}/${bd}" ]]; then
          if [[ -z ${PATH} ]]; then
            PATH=${ph}/${bd}
          else
            PATH=${ph}/${bd}:${PATH}
          fi
        fi
      done
      for ld in lib lib64; do
        if [[ -d "${ph}/${ld}" ]]; then
          if [[ -z ${LD_LIBRARY_PATH} ]]; then
            LD_LIBRARY_PATH=/usr/local/lib/:${ph}/${ld}
          else
            LD_LIBRARY_PATH=/usr/local/lib/:${ph}/${ld}:${LD_LIBRARY_PATH}
          fi
        fi
      done
    fi
  done
  export PATH
  export LD_LIBRARY_PATH
fi # program

[[ -f ~/.bashrc.local1 ]] && . ~/.bashrc.local1

export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTIGNORE='&'
export EDITOR='vim'
export BASHRC_LOADED=y
fi # BASHRC_LOADED
# }}}

